{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nexport const mainPageSlice = createSlice({\n  name: 'mainPage',\n  initialState: {\n    usersCards: null\n  },\n  reducers: {\n    addToUsersCards: (state, action) => {\n      state.usersCards = action.payload;\n    }\n  }\n});\nconst dispatch = useDispatch();\nconst GetUsersCards = createAsyncThunk('users/GetUsersCards', async (userId, thunkAPI) => {\n  const response = await userAPI.fetchById(userId);\n  dispatch(addToUsersCards('fsd'));\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addToUsersCards\n} = mainPageSlice.actions;\nexport default mainPageSlice.reducer;","map":{"version":3,"sources":["/Users/mihailbronnikov/Desktop/codding/Tinder-clone/tinder-clone/Frontend/src/Redux/mainPageSlice.ts"],"names":["createAsyncThunk","createSlice","useDispatch","mainPageSlice","name","initialState","usersCards","reducers","addToUsersCards","state","action","payload","dispatch","GetUsersCards","userId","thunkAPI","response","userAPI","fetchById","actions","reducer"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;AACvCG,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE;AADA,GAFyB;AAKvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACC,OAA1B;AACD;AAHO;AAL6B,CAAD,CAAjC;AAWP,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,MAAMW,aAAa,GAAGb,gBAAgB,CAClC,qBADkC,EAGlC,OAAOc,MAAP,EAAeC,QAAf,KAA4B;AAE1B,QAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACC,SAAR,CAAkBJ,MAAlB,CAAvB;AACAF,EAAAA,QAAQ,CAACJ,eAAe,CAAC,KAAD,CAAhB,CAAR;AACD,CAPiC,CAAtC,C,CASA;;AACA,OAAO,MAAM;AAAEA,EAAAA;AAAF,IAAsBL,aAAa,CAACgB,OAA1C;AAEP,eAAehB,aAAa,CAACiB,OAA7B","sourcesContent":["import { UserType } from './../Types/Types';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux';\n\n\nexport const mainPageSlice = createSlice({\n  name: 'mainPage',\n  initialState: {\n    usersCards: null as null | Array<UserType>\n  },\n  reducers: {\n    addToUsersCards: (state, action) => {\n      state.usersCards = action.payload\n    },\n  },\n})\nconst dispatch = useDispatch()\nconst GetUsersCards = createAsyncThunk(\n    'users/GetUsersCards', \n    \n    async (userId, thunkAPI) => {\n\n      const response = await userAPI.fetchById(userId)\n      dispatch(addToUsersCards('fsd'))\n    }\n  )\n// Action creators are generated for each case reducer function\nexport const { addToUsersCards } = mainPageSlice.actions\n\nexport default mainPageSlice.reducer"]},"metadata":{},"sourceType":"module"}