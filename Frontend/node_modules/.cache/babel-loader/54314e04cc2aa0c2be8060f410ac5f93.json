{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const mainPageSlice = createSlice({\n  name: 'mainPage',\n  initialState: {\n    usersCards: null\n  },\n  reducers: {\n    addToUsersCards: (state, action) => {\n      state.usersCards = action.payload;\n    }\n  }\n});\nexport const GetUsersCards = createAsyncThunk('users/GetUsersCards', async (userId, thunkAPI) => {\n  const response = await axios.get('http://localhost:8001/tinder/cards');\n  console.log(response);\n  addToUsersCards(response);\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addToUsersCards\n} = mainPageSlice.actions;\nexport default mainPageSlice.reducer;","map":{"version":3,"sources":["/Users/mihailbronnikov/Desktop/codding/Tinder-clone/tinder-clone/Frontend/src/Redux/mainPageSlice.ts"],"names":["createAsyncThunk","createSlice","axios","mainPageSlice","name","initialState","usersCards","reducers","addToUsersCards","state","action","payload","GetUsersCards","userId","thunkAPI","response","get","console","log","actions","reducer"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;AACvCG,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE;AADA,GAFyB;AAKvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmD;AAClED,MAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACC,OAA1B;AACD;AAHO;AAL6B,CAAD,CAAjC;AAYP,OAAO,MAAMC,aAAa,GAAGZ,gBAAgB,CACzC,qBADyC,EAEzC,OAAOa,MAAP,EAAeC,QAAf,KAA4B;AAC1B,QAAMC,QAAwB,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,oCAAV,CAAvC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACFP,EAAAA,eAAe,CAACO,QAAD,CAAf;AACC,CANwC,CAAtC,C,CAQP;;AACA,OAAO,MAAM;AAAEP,EAAAA;AAAF,IAAsBL,aAAa,CAACgB,OAA1C;AAEP,eAAehB,aAAa,CAACiB,OAA7B","sourcesContent":["import { UserType } from './../Types/Types';\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux';\nimport axios from 'axios';\n\n\nexport const mainPageSlice = createSlice({\n  name: 'mainPage',\n  initialState: {\n    usersCards: null as null | Array<UserType>\n  },\n  reducers: {\n    addToUsersCards: (state, action: PayloadAction<Array<UserType>>) => {\n      state.usersCards = action.payload\n    },\n  },\n})\n\nexport const GetUsersCards = createAsyncThunk(\n    'users/GetUsersCards', \n    async (userId, thunkAPI) => {\n      const response:Array<UserType> = await axios.get('http://localhost:8001/tinder/cards')\n      console.log(response)\n    addToUsersCards(response)\n    }\n  )\n// Action creators are generated for each case reducer function\nexport const { addToUsersCards } = mainPageSlice.actions\n\nexport default mainPageSlice.reducer"]},"metadata":{},"sourceType":"module"}