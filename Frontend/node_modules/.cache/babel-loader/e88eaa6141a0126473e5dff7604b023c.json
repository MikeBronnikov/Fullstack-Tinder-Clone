{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const mainPageSlice = createSlice({\n  name: \"mainPage\",\n  initialState: {\n    usersCards: null\n  },\n  reducers: {\n    addToUsersCards: (state, action) => {\n      state.usersCards = action.payload;\n    }\n  }\n});\nexport const GetUsersCards = createAsyncThunk(\"users/GetUsersCards\", async (params, {\n  dispatch\n}) => {\n  try {\n    const response = await axios.get(\"http://localhost:8001/tinder/cards\").then(res => res.data);\n    dispatch(addToUsersCards(response));\n  } catch (error) {\n    throw new Error();\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addToUsersCards\n} = mainPageSlice.actions;\nexport default mainPageSlice.reducer;","map":{"version":3,"sources":["/Users/mihailbronnikov/Desktop/codding/Tinder-clone/tinder-clone/Frontend/src/Redux/mainPageSlice.ts"],"names":["createAsyncThunk","createSlice","axios","mainPageSlice","name","initialState","usersCards","reducers","addToUsersCards","state","action","payload","GetUsersCards","params","dispatch","response","get","then","res","data","error","Error","actions","reducer"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;AACvCG,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE;AADA,GAFyB;AAKvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmD;AAClED,MAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACC,OAA1B;AACD;AAHO;AAL6B,CAAD,CAAjC;AAYP,OAAO,MAAMC,aAAa,GAAGZ,gBAAgB,CAC3C,qBAD2C,EAE3C,OAAOa,MAAP,EAAgB;AAAEC,EAAAA;AAAF,CAAhB,KAAiC;AAC/B,MAAI;AACF,UAAMC,QAAyB,GAAG,MAAMb,KAAK,CAC1Cc,GADqC,CACjC,oCADiC,EAErCC,IAFqC,CAE/BC,GAAD,IAASA,GAAG,CAACC,IAFmB,CAAxC;AAGEL,IAAAA,QAAQ,CAACN,eAAe,CAACO,QAAD,CAAhB,CAAR;AAEH,GAND,CAME,OAAOK,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,EAAN;AACD;AACF,CAZ0C,CAAtC,C,CAcP;;AACA,OAAO,MAAM;AAAEb,EAAAA;AAAF,IAAsBL,aAAa,CAACmB,OAA1C;AAEP,eAAenB,aAAa,CAACoB,OAA7B","sourcesContent":["import { UserType } from \"./../Types/Types\";\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\n\n\nexport const mainPageSlice = createSlice({\n  name: \"mainPage\",\n  initialState: {\n    usersCards: null as null | Array<UserType>,\n  },\n  reducers: {\n    addToUsersCards: (state, action: PayloadAction<Array<UserType>>) => {\n      state.usersCards = action.payload;\n    },\n  },\n});\n\nexport const GetUsersCards = createAsyncThunk(\n  \"users/GetUsersCards\",\n  async (params,  { dispatch }) => {\n    try {\n      const response: Array<UserType> = await axios\n        .get(\"http://localhost:8001/tinder/cards\")\n        .then((res) => res.data);\n        dispatch(addToUsersCards(response));\n      \n    } catch (error) {\n      throw new Error\n    }\n  }\n);\n// Action creators are generated for each case reducer function\nexport const { addToUsersCards } = mainPageSlice.actions;\n\nexport default mainPageSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}